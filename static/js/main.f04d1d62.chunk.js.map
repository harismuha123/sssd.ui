{"version":3,"sources":["config.js","util/sweetAlert.js","util/loginFunctions.js","util/registerFunctions.js","components/LoginForm.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["baseURL","MySwal","withReactContent","Swal","showSweetAlert","title","type","message","buttonText","callback","arguments","length","undefined","fire","react_default","a","createElement","Header","as","textAlign","html","style","fontSize","showCloseButton","focusConfirm","confirmButtonText","color","then","loginUser","data","setLoadingState","setInitialValid","axios","post","config","method","headers","Accept","Content-Type","response","valid","localStorage","setItem","email","catch","error","error_message","generateOTP","saveState","getItem","get","otp","verifyOTP","verification_code","generateSMS","success","verifySMS","registerUser","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","setState","name","state","defineProperty","initialValid","handleSubmit","e","preventDefault","JSON","parse","stringify","login_state","handleRegisterSubmit","register_state","handleValidate","handleVerify","handleVerifySMS","handleRegisterChange","_ref","value","handleChange","_ref2","handleInputChange","_ref3","validated","Boolean","mode","username_or_email_address","password","remember_me","email_address","mobile_number","username","re_password","reset_state","token","old_password","new_password","otp_qr","otp_sms","finalValid","_this2","className","Grid","height","verticalAlign","Button","size","onClick","clear","window","location","reload","Column","maxWidth","Image","src","centered","Input","focus","placeholder","onChange","Form","onSubmit","Field","Radio","label","checked","fluid","logo","Segment","stacked","icon","iconPosition","Message","cursor","Component","App","components_LoginForm","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f04d1d62.chunk.js","sourcesContent":["export const baseURL = \"https://sssd-api.herokuapp.com/auth\";\n","import React from \"react\";\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport { Header } from \"semantic-ui-react\";\n\nconst MySwal = withReactContent(Swal);\n\nexport const showSweetAlert = (\n    title,\n    type,\n    message,\n    buttonText,\n    callback = () => {\n        return;\n    }\n) => {\n    return MySwal.fire({\n        title: (\n            <Header as=\"h6\" textAlign=\"center\">\n                <b>{title}</b>\n            </Header>\n        ),\n        type: type,\n        html: (\n            <p\n                style={{\n                    fontSize: \"16px\",\n                    textAlign: \"center\"\n                }}\n            >\n                {message}\n            </p>\n        ),\n        showCloseButton: true,\n        focusConfirm: true,\n        confirmButtonText: (\n            <p style={{ color: \"#ffffff\" }}>\n                <b>{buttonText}</b>\n            </p>\n        )\n    }).then(() => {\n        callback();\n    });\n};\n","import axios from \"axios\";\nimport * as config from \"../config\";\nimport { showSweetAlert } from \"./sweetAlert\";\n\nexport const loginUser = (data, setLoadingState, setInitialValid) => {\n    setLoadingState(true);\n    axios\n        .post(config.baseURL + \"/login\", data, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(response => {\n            if (response.data.valid) {\n                localStorage.setItem(\"user_email\", response.data.email);\n                setInitialValid(true);\n            } else {\n                showSweetAlert(\n                    \"Login failed!\",\n                    \"error\",\n                    response.data.message,\n                    \"CLOSE\"\n                );\n            }\n            setLoadingState(false);\n        })\n        .catch(error => {\n            showSweetAlert(\n                \"Login failed!\",\n                \"error\",\n                error.response.data.error_message,\n                \"CLOSE\",\n                () => {\n                    setLoadingState(false);\n                    setInitialValid(false);\n                }\n            );\n        });\n};\n\nexport const generateOTP = saveState => {\n    let email = localStorage.getItem(\"user_email\");\n    if (email) {\n        saveState(\"loading\", true);\n        axios\n            .get(config.baseURL + \"/login/generate_otp/\" + email, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then(response => {\n                if (response.data.otp) {\n                    saveState(\"otp_qr\", response.data.otp);\n                } else {\n                    showSweetAlert(\n                        \"Generating QR code failed!\",\n                        \"error\",\n                        response.data.message,\n                        \"CLOSE\"\n                    );\n                }\n                saveState(\"loading\", false);\n            })\n            .catch(error => {\n                showSweetAlert(\n                    \"Generating QR code failed!\",\n                    \"error\",\n                    error.response.data.error_message,\n                    \"CLOSE\",\n                    () => {\n                        saveState(\"loading\", false);\n                    }\n                );\n            });\n    }\n};\n\nexport const verifyOTP = (verification_code, saveState) => {\n    let email = localStorage.getItem(\"user_email\");\n    if (email) {\n        saveState(\"loading\", true);\n        axios\n            .post(\n                config.baseURL + \"/login/generate_otp/\",\n                {\n                    verification_code,\n                    email\n                },\n                {\n                    method: \"POST\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n            .then(response => {\n                if (response.data.valid) {\n                    showSweetAlert(\n                        \"Validation successful!\",\n                        \"success\",\n                        response.data.message,\n                        \"CLOSE\",\n                        () => {\n                            localStorage.setItem(\"validated\", true);\n                            saveState(\"finalValid\", true);\n                        }\n                    );\n                } else {\n                    showSweetAlert(\n                        \"Validation failed!\",\n                        \"error\",\n                        response.data.message,\n                        \"CLOSE\"\n                    );\n                }\n                saveState(\"loading\", false);\n            })\n            .catch(error => {\n                showSweetAlert(\n                    \"Validation failed!\",\n                    \"error\",\n                    error.response.data.error_message,\n                    \"CLOSE\",\n                    () => {\n                        saveState(\"loading\", false);\n                    }\n                );\n            });\n    }\n};\n\nexport const generateSMS = saveState => {\n    let email = localStorage.getItem(\"user_email\");\n    if (email) {\n        saveState(\"loading\", true);\n        axios\n            .get(config.baseURL + \"/login/generate_sms/\" + email, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then(response => {\n                if (response.data.success) {\n                    showSweetAlert(\n                        \"SMS code successfully generated!\",\n                        \"success\",\n                        response.data.message,\n                        \"CLOSE\"\n                    );\n                } else {\n                    showSweetAlert(\n                        \"Generating code failed!\",\n                        \"error\",\n                        response.data.message,\n                        \"CLOSE\"\n                    );\n                }\n                saveState(\"loading\", false);\n            })\n            .catch(error => {\n                showSweetAlert(\n                    \"Generating QR code failed!\",\n                    \"error\",\n                    error.response.data.error_message,\n                    \"CLOSE\",\n                    () => {\n                        saveState(\"loading\", false);\n                    }\n                );\n            });\n    }\n};\n\nexport const verifySMS = (verification_code, saveState) => {\n    let email = localStorage.getItem(\"user_email\");\n    if (email) {\n        saveState(\"loading\", true);\n        axios\n            .post(\n                config.baseURL + \"/login/generate_sms/\",\n                {\n                    verification_code,\n                    email\n                },\n                {\n                    method: \"POST\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            )\n            .then(response => {\n                if (response.data.valid) {\n                    showSweetAlert(\n                        \"Validation successful!\",\n                        \"success\",\n                        response.data.message,\n                        \"CLOSE\",\n                        () => {\n                            localStorage.setItem(\"validated\", true);\n                            saveState(\"finalValid\", true);\n                        }\n                    );\n                } else {\n                    showSweetAlert(\n                        \"Validation failed!\",\n                        \"error\",\n                        response.data.message,\n                        \"CLOSE\"\n                    );\n                }\n                saveState(\"loading\", false);\n            })\n            .catch(error => {\n                showSweetAlert(\n                    \"Validation failed!\",\n                    \"error\",\n                    error.response.data.error_message,\n                    \"CLOSE\",\n                    () => {\n                        saveState(\"loading\", false);\n                    }\n                );\n            });\n    }\n};\n","import axios from \"axios\";\nimport * as config from \"../config\";\nimport { showSweetAlert } from \"./sweetAlert\";\n\nexport const registerUser = (data, saveState) => {\n    saveState(\"loading\", true);\n    axios\n        .post(config.baseURL + \"/register\", data, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(response => {\n            if (response.data.success) {\n                showSweetAlert(\n                    \"Registration successful!\",\n                    \"success\",\n                    response.data.message,\n                    \"CLOSE\",\n                    () => {\n                        saveState(\"loading\", false);\n                        saveState(\"mode\", \"login\");\n                    }\n                );\n            } else {\n                showSweetAlert(\n                    \"Registration failed!\",\n                    \"error\",\n                    response.data.message,\n                    \"CLOSE\"\n                );\n            }\n            saveState(\"loading\", false);\n        })\n        .catch(error => {\n            showSweetAlert(\n                \"Registration failed!\",\n                \"error\",\n                error.response.data.error_message,\n                \"CLOSE\",\n                () => {\n                    saveState(\"loading\", false);\n                }\n            );\n        });\n};\n","import React, { Component } from \"react\";\nimport {\n    Button,\n    Form,\n    Grid,\n    Header,\n    Image,\n    Message,\n    Segment,\n    Radio,\n    Input\n} from \"semantic-ui-react\";\nimport logo from \"../logo.svg\";\nimport {\n    loginUser,\n    generateOTP,\n    verifyOTP,\n    generateSMS,\n    verifySMS\n} from \"../util/loginFunctions\";\nimport { registerUser } from \"../util/registerFunctions\";\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n\n        let validated = Boolean(localStorage.getItem(\"validated\"));\n\n        this.state = {\n            mode: \"login\",\n            login_state: {\n                username_or_email_address: \"\",\n                password: \"\",\n                remember_me: false\n            },\n            register_state: {\n                name: \"\",\n                email_address: \"\",\n                mobile_number: \"\",\n                username: \"\",\n                password: \"\",\n                re_password: \"\"\n            },\n            reset_state: {\n                token: \"\",\n                old_password: \"\",\n                new_password: \"\",\n                re_password: \"\"\n            },\n            verification_code: \"\",\n            otp_qr: \"\",\n            otp_sms: \"\",\n            otp: \"qr\",\n            loading: false,\n            initialValid: false,\n            finalValid: validated ? validated : false\n        };\n    }\n\n    setLoadingState = loading => {\n        this.setState({\n            loading\n        });\n    };\n\n    saveState = (name, state) => {\n        this.setState({\n            [name]: state\n        });\n    };\n\n    setInitialValid = valid => {\n        this.setState({\n            initialValid: valid\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        loginUser(\n            JSON.parse(JSON.stringify(this.state.login_state)),\n            this.setLoadingState,\n            this.setInitialValid\n        );\n    };\n\n    handleRegisterSubmit = e => {\n        e.preventDefault();\n        registerUser(\n            JSON.parse(JSON.stringify(this.state.register_state)),\n            this.saveState\n        );\n    };\n\n    handleValidate = e => {\n        e.preventDefault();\n        this.state.otp === \"qr\"\n            ? generateOTP(this.saveState)\n            : generateSMS(this.saveState);\n    };\n\n    handleVerify = e => {\n        e.preventDefault();\n        verifyOTP(\n            JSON.parse(JSON.stringify(this.state.verification_code)),\n            this.saveState\n        );\n    };\n\n    handleVerifySMS = e => {\n        e.preventDefault();\n        verifySMS(\n            JSON.parse(JSON.stringify(this.state.verification_code)),\n            this.saveState\n        );\n    };\n\n    handleRegisterChange = (e, { name, value }) => {\n        let register_state = JSON.parse(\n            JSON.stringify(this.state.register_state)\n        );\n        register_state[name] = value;\n        this.setState({\n            register_state\n        });\n    };\n\n    handleChange = (e, { name, value }) => {\n        let login_state = JSON.parse(JSON.stringify(this.state.login_state));\n        login_state[name] = value;\n        this.setState({\n            login_state\n        });\n    };\n\n    handleInputChange = (e, { name, value }) => {\n        this.setState({\n            [name]: value\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"login-form\">\n                {/*\n      Heads up! The styles below are necessary for the correct render of this example.\n      You can do same with CSS, the main idea is that all the elements up to the `Grid`\n      below must have a height of 100%.\n    */}\n                <style>\n                    {`\n      .login-form {\n          padding-top: 270px;\n      }\n\n      .swal2-popup {\n          height: auto;\n      }\n    `}\n                </style>\n                {this.state.mode === \"login\" ? (\n                    <Grid\n                        textAlign=\"center\"\n                        style={{ height: \"100%\" }}\n                        verticalAlign=\"middle\"\n                    >\n                        {!this.state.finalValid &&\n                        !localStorage.getItem(\"validated\") ? (\n                            <Grid.Column style={{ maxWidth: 450 }}>\n                                {!this.state.initialValid ? (\n                                    <div>\n                                        <Header\n                                            as=\"h2\"\n                                            color=\"teal\"\n                                            textAlign=\"center\"\n                                        >\n                                            <Image src={logo} /> Log-in to your\n                                            account\n                                        </Header>\n                                        <Form\n                                            size=\"large\"\n                                            onSubmit={this.handleSubmit}\n                                            loading={this.state.loading}\n                                        >\n                                            <Segment stacked>\n                                                <Form.Input\n                                                    fluid\n                                                    icon=\"user\"\n                                                    iconPosition=\"left\"\n                                                    name=\"username_or_email_address\"\n                                                    placeholder=\"Username or E-mail address\"\n                                                    onChange={this.handleChange}\n                                                />\n                                                <Form.Input\n                                                    fluid\n                                                    icon=\"lock\"\n                                                    iconPosition=\"left\"\n                                                    placeholder=\"Password\"\n                                                    type=\"password\"\n                                                    name=\"password\"\n                                                    onChange={this.handleChange}\n                                                />\n\n                                                <Button\n                                                    color=\"teal\"\n                                                    fluid\n                                                    size=\"large\"\n                                                >\n                                                    Login\n                                                </Button>\n                                            </Segment>\n                                        </Form>\n                                        <Message>\n                                            New to us?{\" \"}\n                                            <span\n                                                style={{\n                                                    color: \"#728cd4\",\n                                                    cursor: \"pointer\"\n                                                }}\n                                                onClick={() => {\n                                                    this.saveState(\n                                                        \"mode\",\n                                                        \"register\"\n                                                    );\n                                                }}\n                                            >\n                                                Sign Up\n                                            </span>\n                                        </Message>\n                                    </div>\n                                ) : !(this.state.otp_qr.length > 0) ? (\n                                    <Form\n                                        onSubmit={this.handleValidate}\n                                        loading={this.state.loading}\n                                    >\n                                        <Form.Field>\n                                            <Radio\n                                                label=\"Validate login with code generated by Google Validator\"\n                                                name=\"otp\"\n                                                value=\"qr\"\n                                                checked={\n                                                    this.state.otp === \"qr\"\n                                                }\n                                                onChange={\n                                                    this.handleInputChange\n                                                }\n                                            />\n                                        </Form.Field>\n                                        <Form.Field>\n                                            <Radio\n                                                label=\"Validate login with code sent by SMS\"\n                                                name=\"otp\"\n                                                value=\"sms\"\n                                                checked={\n                                                    this.state.otp === \"sms\"\n                                                }\n                                                onChange={\n                                                    this.handleInputChange\n                                                }\n                                            />\n                                        </Form.Field>\n                                        <Button\n                                            color=\"teal\"\n                                            loading={this.state.loading}\n                                            fluid\n                                            size=\"large\"\n                                            onClick={() => {\n                                                if (this.state.otp === \"sms\") {\n                                                    this.setState(\n                                                        {\n                                                            otp_qr: \"test\"\n                                                        },\n                                                        () => {\n                                                            generateSMS(\n                                                                this.saveState\n                                                            );\n                                                        }\n                                                    );\n                                                }\n                                            }}\n                                        >\n                                            Validate account\n                                        </Button>\n                                    </Form>\n                                ) : (\n                                    <div>\n                                        {this.state.otp === \"qr\" && (\n                                            <Image\n                                                src={this.state.otp_qr}\n                                                centered\n                                                verticalAlign=\"middle\"\n                                                size=\"medium\"\n                                            />\n                                        )}\n                                        <Input\n                                            focus\n                                            placeholder=\"OTP Code here...\"\n                                            size=\"large\"\n                                            onChange={this.handleInputChange}\n                                            name=\"verification_code\"\n                                        />\n                                        <br />\n                                        <br />\n                                        {this.state.otp === \"qr\" ? (\n                                            <Button\n                                                color=\"teal\"\n                                                size=\"large\"\n                                                loading={this.state.loading}\n                                                onClick={this.handleVerify}\n                                            >\n                                                Validate code\n                                            </Button>\n                                        ) : (\n                                            <Button\n                                                color=\"teal\"\n                                                size=\"large\"\n                                                loading={this.state.loading}\n                                                onClick={this.handleVerifySMS}\n                                            >\n                                                Validate code\n                                            </Button>\n                                        )}\n                                    </div>\n                                )}\n                            </Grid.Column>\n                        ) : (\n                            <div>\n                                <p>You are now logged in!</p>\n                                <Button\n                                    color=\"teal\"\n                                    size=\"large\"\n                                    onClick={() => {\n                                        localStorage.clear();\n                                        window.location.reload();\n                                    }}\n                                >\n                                    Sign out\n                                </Button>\n                            </div>\n                        )}\n                    </Grid>\n                ) : (\n                    <Grid\n                        textAlign=\"center\"\n                        style={{ height: \"100%\" }}\n                        verticalAlign=\"middle\"\n                    >\n                        <Grid.Column style={{ maxWidth: 450 }}>\n                            <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n                                <Image src={logo} /> Register new account\n                            </Header>\n                            <Form\n                                size=\"large\"\n                                onSubmit={this.handleRegisterSubmit}\n                                loading={this.state.loading}\n                            >\n                                <Segment stacked>\n                                    <Form.Input\n                                        fluid\n                                        icon=\"user\"\n                                        iconPosition=\"left\"\n                                        name=\"name\"\n                                        placeholder=\"Name and surname\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n                                    <Form.Input\n                                        fluid\n                                        icon=\"mail\"\n                                        iconPosition=\"left\"\n                                        name=\"email_address\"\n                                        placeholder=\"Email address\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n                                    <Form.Input\n                                        fluid\n                                        icon=\"phone\"\n                                        iconPosition=\"left\"\n                                        name=\"mobile_number\"\n                                        placeholder=\"Mobile phone number\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n                                    <Form.Input\n                                        fluid\n                                        icon=\"user secret\"\n                                        iconPosition=\"left\"\n                                        name=\"username\"\n                                        placeholder=\"Username\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n                                    <Form.Input\n                                        fluid\n                                        icon=\"lock\"\n                                        iconPosition=\"left\"\n                                        placeholder=\"Password\"\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n                                    <Form.Input\n                                        fluid\n                                        icon=\"unlock\"\n                                        iconPosition=\"left\"\n                                        placeholder=\"Retype password\"\n                                        type=\"password\"\n                                        name=\"re_password\"\n                                        onChange={this.handleRegisterChange}\n                                    />\n\n                                    <Button color=\"teal\" fluid size=\"large\">\n                                        Register\n                                    </Button>\n                                </Segment>\n                            </Form>\n                            <Message>\n                                Already have an account?{\" \"}\n                                <span\n                                    style={{\n                                        color: \"#728cd4\",\n                                        cursor: \"pointer\"\n                                    }}\n                                    onClick={() => {\n                                        this.saveState(\"mode\", \"login\");\n                                    }}\n                                >\n                                    Log in\n                                </span>\n                            </Message>\n                        </Grid.Column>\n                    </Grid>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport LoginForm from \"./components/LoginForm\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <LoginForm />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}